version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: booking-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-booking}
      POSTGRES_USER: ${DB_USER:-booking_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-booking_pass_123}
      TZ: ${TZ:-Asia/Kolkata}
    # Optional: expose for local tools (remove in prod)
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      # Optional: place .sql files here to init schema/data on first run
      - ./docker/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-booking_user} -d ${DB_NAME:-booking}"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [appnet]

  api:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    image: booking-backend:latest
    container_name: booking-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Match your application.properties env overrides
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME:-booking}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-booking_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-booking_pass_123}

      SPRING_JPA_HIBERNATE_DDL_AUTO: ${DDL_AUTO:-update}   # use 'validate' with Flyway in prod
      SPRING_JPA_SHOW_SQL: ${SHOW_SQL:-false}
      SPRING_FORMAT_SQL: ${FORMAT_SQL:-false}
      SPRING_OPEN_IN_VIEW: ${OPEN_IN_VIEW:-false}
      SPRING_SQL_INIT_MODE: ${SQL_INIT_MODE:-never}

      TZ: ${TZ:-Asia/Kolkata}
    # Optional: expose API directly for debugging
    ports:
      - "8080:8080"
    networks: [appnet]

  web:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    image: booking-frontend:latest
    container_name: booking-web
    depends_on:
      - api
    ports:
      - "80:80"   # access the app at http://localhost/
    networks: [appnet]

networks:
  appnet:
    driver: bridge

volumes:
  pg_data:
